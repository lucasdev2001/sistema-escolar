import dbConnect from "../lib/dbConnect"
import Aluno from "../models/Aluno"
import Head from "next/head"
import Script from "next/script"
import Card from "../components/Card"
import { useState } from "react"




const Home = ({ data }) => {
  let isEmpty = false
  const contentType = "application/json"
  const [message, setMessage] = useState("")
  const [form, setForm] = useState({
    nome: String,
    cpf: String,
    sexo: String,
    email: String,
    telefone: String
  })

  const handleChange = (e) => {
    const value = e.target.value
    const name = e.target.name
    setForm({
      ...form,
      [name]: value
    })
  }

  const postData = async (form) => {
    try {
      const res = await fetch("/api/alunos", {
        method: "POST",
        headers: {
          Accept: contentType,
          "Content-Type": contentType
        },
        body: JSON.stringify(form)
      })
      window.location.replace("/")
      if (!res.ok) {
        throw new Error(res.status)
      }
    } catch (error) {
      setMessage("Falha ao adicionar novo aluno")
    }
  }

  function SomeScript(params) {
    console.log('this is a secret embeded script')
    return <h1> Hello {params.name} </h1>
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    postData(form)
    document.getElementById("spinner").removeAttribute("hidden")
  }

  const handleFirstLink = (e) => {
    e.preventDefault()
    document.getElementById("spinner").removeAttribute("hidden")
    window.location.replace("/estatisticas")
  }

  const handleSecondLink = (e) => {
    e.preventDefault()
    document.getElementById("spinner").removeAttribute("hidden")
    window.location.replace("/localizacoes")
  }

  if (data.length === 0) {
    isEmpty = true
  }

 

  return (
    <>
      <Head>
        <title>Sistema Escolar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className="navbar navbar-expand-lg bg-light">
        <div className="container-fluid">
          <button
            className="navbar-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarNav"
            aria-controls="navbarNav"
            aria-expanded="false"
            aria-label="Toggle navigation">
            <span className="navbar-toggler-icon"></span>
          </button>
          <div
            className="collapse navbar-collapse justify-content-center text-center"
            id="navbarNav">
            <ul className="navbar-nav">
              <li className="nav-item">
                <a
                  className="nav-link"
                  data-bs-toggle="offcanvas"
                  data-bs-target="#offcanvasBottom"
                  aria-controls="offcanvasBottom"
                  href="">
                  Cadastrar
                </a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="" onClick={handleFirstLink}>
                  Estatísticas
                </a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="" onClick={handleSecondLink}>
                  Localizações
                </a>
              </li>
            </ul>
          </div>
        </div>
      </nav>

      <div
        className="offcanvas offcanvas-bottom h-75 p-5"
        tabIndex="-1"
        id="offcanvasBottom"
        aria-labelledby="offcanvasBottomLabel">
        <div className="offcanvas-header text-center">
          <h5 className="text-center">Cadastrar Aluno</h5>
          <button
            type="button"
            className="btn-close"
            data-bs-dismiss="offcanvas"
            aria-label="Close"></button>
        </div>
        <div className="offcanvas-body small">
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label className="form-label">Nome</label>
              <input
                type="text"
                className="form-control"
                name="nome"
                onInput={handleChange}
                required
              />
            </div>
            <div className="mb-3">
              <label className="form-label">CPF</label>
              <input
                type="text"
                className="form-control"
                minLength="14"
                name="cpf"
                id="cpf"
                onInput={handleChange}
                autoComplete="none"
                required
              />
            </div>
            <div className="mb-3">
              <label className="form-label">Sexo</label>
              <div className="form-check">
                <input
                  className="form-check-input"
                  type="radio"
                  name="sexo"
                  id="sexo"
                  value="masculino"
                  onInput={handleChange}
                  required
                />
                <label className="form-check-label">masculino</label>
              </div>
              <div className="form-check">
                <label className="form-check-label">feminino</label>
                <input
                  className="form-check-input"
                  type="radio"
                  name="sexo"
                  id="sexo"
                  value="feminino"
                  onInput={handleChange}
                  required
                />
              </div>
            </div>
            <div className="mb-3">
              <label className="form-label">Email</label>
              <input
                type="email"
                className="form-control"
                name="email"
                id="email"
                onInput={handleChange}
                required
              />
            </div>
            <div className="mb-3">
              <label className="form-label">Telefone</label>
              <input
                type="text"
                className="form-control"
                minLength="15"
                name="telefone"
                id="telefone"
                onInput={handleChange}
                autoComplete="none"
                required
              />
            </div>
            <p>{message}</p>
            <div className="row g-2">
              <div className="col-12">
                <button type="submit" className="btn btn-primary ml-5">
                  Cadastrar
                </button>
              </div>
              <div className="col-12" hidden id="spinner">
                <div className="spinner-grow text-success" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>

      <div>
        <div className="container-fluid d-flex justify-content-center text-center row">
          <div className="col-12">
            <button
              type="button"
              className="btn btn-dark mb-3 mt-5"
              data-bs-toggle="modal"
              data-bs-target="#modalTabela">
              Em tabela
            </button>
          </div>
          <div className="col-12" hidden id="spinner">
            <div className="spinner-border text-success" role="status">
              <span className="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>

      <main>
        <div className="container-fluid text-center">
          <div className="row row-cols-1 row-cols-md-3 g-5 d-flex justify-content-center">
            {data.map((data) => {
              return (
                <Card
                  key={data._id}
                  id={data._id}
                  nome={data.nome}
                  cpf={data.cpf}
                  sexo={data.sexo}
                  email={data.email}
                  telefone={data.telefone}
                />
              )
            })}
          </div>
          {isEmpty ? (<p>Humm... parece que ainda não existe nenhum registro, experimente cadastrar alguns alunos</p>) : ("")}
        </div>
      </main>



      <div
        className="modal fade"
        id="modalTabela"
        tabIndex="-1"
        aria-labelledby="modalTabelaLabel"
        aria-hidden="true">
        <div className="modal-dialog modal-fullscreen">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="modalTabelaLabel">
                Tabela de registros
              </h5>
              <button
                type="button"
                className="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"></button>
            </div>
            <div className="modal-body">
              <table className="table table-dark p-5 text-center table-hover">
                <thead>
                  <tr>
                    <th scope="col">Nome</th>
                    <th scope="col">CPF</th>
                    <th scope="col">Sexo</th>
                    <th scope="col">Email</th>
                    <th scope="col">Telefone</th>
                  </tr>
                </thead>
                <tbody>
                  {data.map((data) => {
                    return (
                      <tr key={data._id}>
                        <td>{data.nome}</td>
                        <td>{data.cpf}</td>
                        <td>{data.sexo}</td>
                        <td>{data.email}</td>
                        <td>{data.telefone}</td>
                      </tr>
                    )
                  })}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <Script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"></Script>
      <Script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></Script>
      <Script
        src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.min.js"
        strategy="lazyOnload"
        integrity="sha512-pHVGpX7F/27yZ0ISY+VVjyULApbDlD0/X0rgGbTqCE7WFW5MezNTWG/dnhtbBuICzsd0WQPgpE4REBLv+UqChw=="
        crossorigin="anonymous"
        referrerPolicy="no-referrer"></Script>
      <Script src="scripts/maskScript.js" strategy="lazyOnload"></Script>
    </>
  )
}

export async function getServerSideProps() {
  await dbConnect()
  const result = await Aluno.find({})
  const datarev = result.map((doc) => {
    const datarev = doc.toObject()
    datarev._id = datarev._id.toString()
    return datarev
  })
  const data = datarev.reverse()

  return { props: { data } }
}

export default Home
